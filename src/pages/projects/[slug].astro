---
import { fetchLanguages, fetchCommits } from "../../lib/octokit";
import { fetchProjectDetailPage } from "../../lib/sanity";

import ActivityLog from "../../components/ActivityLog.vue";
import ImageGallery from "../../components/ImageGallery.vue";
import BarGraph from "../../components/BarGraph.vue";
import DetailHeader from "../../components/DetailHeader.vue";
import PageLayout from "../../layouts/PageLayout.astro";
import ProjectInfo from "../../components/ProjectInfo.vue";
import TextBlock from "../../components/TextBlock.vue";
import TechList from "../../components/TechList.vue";
import TagGrid from "../../components/TagGrid.vue";
import CardThumbnailLink from "../../components/cards/CardThumbnailLink.vue";
import CardOrganization from "../../components/cards/CardOrganization.vue";

import type { Language } from "../../interfaces/Language";
import type { Project } from "../../interfaces/Project";
import type { Organization } from "../../interfaces/Organization";

const data = await fetchProjectDetailPage(Astro.params.slug || "");

if (!data.project) {
    return new Response(null, {
        status: 404,
        statusText: "Not found",
    });
}

let languages: Language[] = [];
let commits = [];
let lastCommit;

// Fetch Github Data
if (data?.project.repositoryUsername && data?.project.repositorySlug) {
    const fetchedLanguages = await fetchLanguages(
        data.project.repositoryUsername,
        data.project.repositorySlug,
    );
    languages = fetchedLanguages;

    const fetchedCommits = await fetchCommits(
        data.project.repositoryUsername,
        data.project.repositorySlug,
    );
    commits = Array.isArray(fetchedCommits) ? fetchedCommits.slice(0, 6) : [];
}

if (commits?.length) {
    lastCommit = commits[0].commit.author.date;
}
---

<PageLayout
    title={`${data?.profile.name} | ${data.project.title}`}
    global={data?.global}
    profile={data?.profile}
    seoDescription={data.project.intro}
    seoImage={data.project.mainImage}
>
    <section>
        <DetailHeader
            client:load
            title={data?.project.title}
            image={data?.project.mainImage}
            intro={data?.project.intro}
            launchUrl={data?.project.url}
            codeUrl={data?.project.repository}
            isFeatured={data?.project.featured}
            status={data?.project.status}
        />
    </section>
    <div
        class="project-details container grid md:grid-cols-3 gap-[2.5rem] md:gap-x-[4rem] pt-[2rem] md:pt-[4rem]"
    >
        <div class="flex-col-3 md:col-span-2 order-last md:order-none">
            <section class="flex-col-1">
                <h2 class="section-title hidden md:block">Details</h2>
                <ProjectInfo
                    data={data.project}
                    lastCommit={lastCommit}
                    class="hidden md:block"
                />
            </section>
            <section class="flex-col-1 mt-[-2.5rem] md:mt-0">
                <h2 class="section-title">Description</h2>
                <TextBlock
                    text={data.project.description}
                    isRichtext={true}
                    client:load
                />
            </section>
            {
                commits?.length > 0 && (
                    <section class="flex-col-1">
                        <h2 class="section-title">Activity</h2>
                        <ActivityLog items={commits} />
                    </section>
                )
            }
            {
                data.project?.galleryImages?.length > 0 && (
                    <section class="flex-col-1">
                        <h2 class="section-title">Images</h2>
                        <ImageGallery images={data.project.galleryImages} />
                    </section>
                )
            }
            <section class="md:!hidden flex-col-1">
                <h2 class="section-title">Categories</h2>
                <TagGrid tags={data.project.tags} title="categories" />
            </section>
            {
                data.project?.relatedProjects?.length > 0 && (
                    <section class="flex-col-1">
                        <h2 class="section-title">Related Projects</h2>
                        <ul class="grid xl:grid-cols-2 gap-x-[1rem] gap-y-[1rem] md:gap-y-[2rem]">
                            {data?.project.relatedProjects.map(
                                (relatedProject: Project) => (
                                    <li>
                                        <CardThumbnailLink
                                            link={relatedProject}
                                        />
                                    </li>
                                ),
                            )}
                        </ul>
                    </section>
                )
            }
            <!-- End of page on mobile -->
        </div>
        <aside class="sidebar flex flex-col gap-y-[3.125rem] justify-between">
            <div class="flex-col-3">
                <!-- Top of page on mobile -->
                <section class="md:!hidden flex-col-1">
                    <h2 class="section-title">Details</h2>
                    <ProjectInfo data={data?.project} lastCommit={lastCommit} />
                </section>
                {
                    languages.length > 0 && (
                        <section class="flex-col-1">
                            <h2 class="section-title">Languages</h2>
                            <BarGraph data={languages} />
                        </section>
                    )
                }
                <section class="flex-col-1">
                    <h2 class="section-title">Technologies</h2>
                    <TechList
                        client:load
                        items={data?.project.technologies}
                        isOpen={true}
                    />
                </section>
                {
                    data.project.relatedOrganizations?.length > 0 && (
                        <section class="flex-col-1">
                            <h2 class="section-title">Organizations</h2>
                            <ul class="flex-col-1">
                                {data?.project.relatedOrganizations.map(
                                    (organization: Organization) => (
                                        <li>
                                            <CardOrganization
                                                org={organization}
                                            />
                                        </li>
                                    ),
                                )}
                            </ul>
                        </section>
                    )
                }
                <section class="!hidden md:!block">
                    <h2 class="section-title pb-[1rem]">Categories</h2>
                    <TagGrid tags={data?.project.tags} title="categories" />
                </section>
            </div>
        </aside>
    </div>
</PageLayout>
